---
import type { HTMLTag, Polymorphic } from 'astro/types';

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	align?: 'center' | 'flex-start' | 'flex-end';
	justify?: 'center' | 'flex-start' | 'flex-end';
	gap?: string | number;
	direction?: 'row' | 'column';
	noWrap?: boolean;
};

const {
	as: Tag = 'div',
	class: className,
	style,
	align,
	justify,
	direction,
	noWrap,
	gap,
	...props
} = Astro.props as Props<HTMLTag>;
const propStyles: astroHTML.JSX.CSSProperties = {};

if (align) {
	propStyles.alignItems = align;
}

if (justify) {
	propStyles.justifyContent = justify;
}

if (direction) {
	propStyles.flexDirection = direction;
}

if (noWrap) {
	propStyles.flexWrap = 'nowrap';
}

if (gap) {
	propStyles.gap = gap;
}
---

<style>
	.flex-root {
		display: flex;
		flex-flow: wrap;
	}
</style>
<Tag
	{...props as any}
	style={{ ...(style as any), ...propStyles }}
	class:list={['flex-root', className]}><slot /></Tag
>
